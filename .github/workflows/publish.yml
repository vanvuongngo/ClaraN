name: "publish"

on:
  push:
    tags:
      - "v*"

env:
  JAVA_DISTRIBUTION: "zulu"
  JAVA_VERSION: 17
  NDK_MAJOR_VERSION: 28
  NODE_VERSION: "lts/*"
  PNPM_VERSION: 10
  SRC_TAURI: "apps/clara-n/src-tauri"
  TAG: ${{ github.ref_name }}
  RELEASE_VERSION: ${TAG#v}

jobs:
  versioning:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v4

      # https://github.com/maxgfr/github-change-json
      - name: Modify version of the tauri.conf.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: maxgfr/github-change-json@main
        with:
          key: "version"
          value: ${{ env.RELEASE_VERSION }}
          path: ${{ env.SRC_TAURI }}/tauri.conf.json
          commit: true

  publish:
    needs: versioning
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - args: "--target aarch64-apple-darwin"
            arch: "arm64"
            platform: macos-latest
          - args: "--target x86_64-apple-darwin"
            arch: "x64"
            platform: macos-latest
          - platform: "ubuntu-latest"
          - platform: "windows-latest"
    runs-on: ${{ matrix.platform }}
    environment: dev
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
    steps:
      - name: Import Apple Developer Certificate
        if: matrix.platform == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_CERTIFICATE | base64 -d > certificate.p12
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain
      - name: Verify Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Apple Development")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Certificate imported."

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # required to get the new version from the versioning job
          ref: ${{ github.ref_name }}

      # Android
      - name: Setup Android signing
        if: matrix.platform == 'ubuntu-latest'
        env:
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEY_BASE64: ${{ secrets.ANDROID_KEY_BASE64 }}
        run: |
          cd ${{ env.SRC_TAURI }}/gen/android
          echo "keyAlias=$ANDROID_KEY_ALIAS" > keystore.properties
          echo "password=$ANDROID_KEY_PASSWORD" >> keystore.properties
          base64 -d <<< "$ANDROID_KEY_BASE64" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=${RUNNER_TEMP}/keystore.jks" >> keystore.properties
      # https://github.com/actions/setup-java
      - name: Setup JDK
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
      # https://github.com/android-actions/setup-android
      - name: Setup Android SDK
        if: matrix.platform == 'ubuntu-latest'
        uses: android-actions/setup-android@v3
      - name: Set NDK_HOME environment
        if: matrix.platform == 'ubuntu-latest'
        run: |
          MAJOR_VERSION=${{ env.NDK_MAJOR_VERSION }}
          SDK_MANAGER="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager"
          NDK_VERSION=$(${SDK_MANAGER} --list | grep "ndk;${MAJOR_VERSION}.*" | awk '{gsub("ndk;", ""); print $1}' | sort -V | tail -n1)
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_ENV

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # https://github.com/actions/setup-node
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          architecture: ${{ matrix.arch || '' }}
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install Node dependencies
        run: pnpm i

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.platform == 'ubuntu-latest' && 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./${{ env.SRC_TAURI }} -> target"

      # https://github.com/tauri-apps/tauri-action
      - name: Build Tauri and add to release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ env.CERT_ID }}
        with:
          appVersion: ${{ env.RELEASE_VERSION }}
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: "ClaraN v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args || '' }}
          tauriScript: ${{ matrix.platform == 'ubuntu-latest' && 'pnpm tauri android' || '' }}

      - name: Add Android to release
        if: matrix.platform == 'ubuntu-latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload app-${{ github.ref_name }} ${{ env.SRC_TAURI }}/gen/android/app/build/outputs/apk/universal/release/app-universal-release.apk
          gh release upload app-${{ github.ref_name }} ${{ env.SRC_TAURI }}/gen/android/app/build/outputs/bundle/universalRelease/app-universal-release.aab
